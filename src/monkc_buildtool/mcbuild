#!/bin/sh
ROOT=$PWD

dumpBuild()
{
	echo 'MODULES = $(wildcard *.c)' 											> build/Makefile
	echo 'OBJS = $(patsubst %.c, %.o, $(MODULES))' 								>> build/Makefile                        
	echo 'LINK_HEAD = -I/usr/local/include/monkc -I/usr/local/include/lemontea' >> build/Makefile    
	echo 'LINK_BIN = -lpthread -L/usr/local/lib -lmonkc -llemontea' 			>> build/Makefile
	echo 'CC = clang -g -w -Wall -Wno-unused-variable -Wno-return-type' 		>> build/Makefile             
	echo 'AS = as' 																>> build/Makefile
	echo 'LEX = mcpp' 															>> build/Makefile                                               
	echo 'exec:$(OBJS)' 														>> build/Makefile
	echo '	$(CC) -o exec $(OBJS) $(LINK_BIN)' 									>> build/Makefile
	echo '%.o:%.c' 																>> build/Makefile
	echo '	$(LEX) $< .hash' 													>> build/Makefile
	echo '	mv -f .hash $<' 													>> build/Makefile
	echo '	$(CC) -c $< $(LINK_HEAD)' 											>> build/Makefile                                             
	echo 'clean:' 																>> build/Makefile
	echo '	rm -f exec $(OBJS) temp.* stream.txt core'							>> build/Makefile
	echo 'dump:'																>> build/Makefile
	echo '	ulimit -c unlimited'												>> build/Makefile
}

if [ "$1" = "" ]
then
	echo "1.mcbuild -create			//create a project at current path"
	echo "2.mcbuild -sync 			//sync src to build"
	echo "3.cd ./build && make      //compile"
fi
if [ "$1" = "-create" ]
then
	mkdir -p -v src
	mkdir -p -v build
	dumpBuild
	echo "1.[o] -create"
	echo "2.[x] -sync"
	echo "3.[x] ./build && make"
fi
if [ "$1" = "-sync" ]
then
	rm -f -r build
	mkdir -p -v build
	dumpBuild
	cp -vf $(find ./src -name '*.c') build
	cp -vf $(find ./src -name '*.h') build
	cp -vf $(find ./src -name '*.p') build
	echo "1.[o] -create"
	echo "2.[o] -sync"
	echo "3.[x] ./build && make"
fi
